// <auto-generated />
using System;
using BeerOverflow.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeerOverflow.Data.Migrations
{
    [DbContext(typeof(BeerOverflowContext))]
    [Migration("20200503180429_addedSeeder_User_UB_Roles")]
    partial class addedSeeder_User_UB_Roles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BeerOverflow.Data.Entities.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AlcByVol")
                        .HasColumnType("float");

                    b.Property<string>("BeerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int>("BeerTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BreweryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateUnlisted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeerName")
                        .IsUnique();

                    b.HasIndex("BeerTypeId");

                    b.HasIndex("BreweryId");

                    b.ToTable("Beers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlcByVol = 5.5999999999999996,
                            BeerName = "Possession Porter",
                            BeerTypeId = 1,
                            BreweryId = 1,
                            Description = "American beer"
                        },
                        new
                        {
                            Id = 2,
                            AlcByVol = 5.0,
                            BeerName = "Wexford Irish Cream Ale",
                            BeerTypeId = 3,
                            BreweryId = 3,
                            Description = "English beer"
                        },
                        new
                        {
                            Id = 3,
                            AlcByVol = 4.9000000000000004,
                            BeerName = "Hoegaarden",
                            BeerTypeId = 3,
                            BreweryId = 5,
                            Description = "Belge beer"
                        },
                        new
                        {
                            Id = 4,
                            AlcByVol = 5.0,
                            BeerName = "Heineken",
                            BeerTypeId = 3,
                            BreweryId = 4,
                            Description = "Dutch beer"
                        },
                        new
                        {
                            Id = 5,
                            AlcByVol = 4.5,
                            BeerName = "Corona Extra",
                            BeerTypeId = 2,
                            BreweryId = 6,
                            Description = "Mexican-Belge beer"
                        },
                        new
                        {
                            Id = 6,
                            AlcByVol = 4.0,
                            BeerName = "Snow",
                            BeerTypeId = 2,
                            BreweryId = 7,
                            Description = "Chinese beer"
                        },
                        new
                        {
                            Id = 7,
                            AlcByVol = 5.0,
                            BeerName = "Budweiser",
                            BeerTypeId = 2,
                            BreweryId = 1,
                            Description = "American beer"
                        },
                        new
                        {
                            Id = 8,
                            AlcByVol = 5.0,
                            BeerName = "Left Hand Milk Stout",
                            BeerTypeId = 4,
                            BreweryId = 8,
                            Description = "English beer"
                        },
                        new
                        {
                            Id = 9,
                            AlcByVol = 5.0,
                            BeerName = "Tsingtao",
                            BeerTypeId = 3,
                            BreweryId = 3,
                            Description = "Chinese beer"
                        },
                        new
                        {
                            Id = 10,
                            AlcByVol = 4.2000000000000002,
                            BeerName = "Coors Light",
                            BeerTypeId = 2,
                            BreweryId = 10,
                            Description = "English beer"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.BeerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("BeerTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Style of beer that was developed in London in the early eighteenth century.",
                            Type = "Porter"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Type of beer conditioned at low temperatures.",
                            Type = "Lager"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Type of beer brewed using a warm fermentation method",
                            Type = "Ale"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Dark, top-fermented beer with a number of variations, including dry stout, Baltic porter, milk stout, and imperial stout.",
                            Type = "Stout"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Brewery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Breweries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Description = "America",
                            Name = "Diamond Knot Brewery"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Description = "American brewery",
                            Name = "Anheuser-Busch"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 4,
                            Description = "English brewery",
                            Name = "Greene King"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 3,
                            Description = "Dutch brewery",
                            Name = "Heineken International"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 2,
                            Description = "Belge brewery",
                            Name = "Brouwerij van Hoegaarden"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 7,
                            Description = "Mexican brewery",
                            Name = "Grupo Modelo"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 9,
                            Description = "Chinese brewery",
                            Name = "CR Snow"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Description = "American brewery",
                            Name = "Left Hand Brewing"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 4,
                            Description = "Chinese brewery",
                            Name = "Tsingtao Brewery"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Description = "American brewery",
                            Name = "Coors Brewing Company"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "United States"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 4,
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 9,
                            Name = "China"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Norway"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.RateReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInapropriate")
                        .HasColumnType("bit");

                    b.Property<int>("LikeReview")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("RateReviews");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BeerId");

                    b.HasIndex("UserId", "BeerId")
                        .IsUnique();

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeerId = 9,
                            RMessage = "Cool beer!",
                            Rating = 5,
                            ReviewedOn = new DateTime(2020, 5, 3, 18, 4, 28, 596, DateTimeKind.Utc).AddTicks(2373),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BeerId = 9,
                            RMessage = "Very fresh, would buy again!",
                            Rating = 4,
                            ReviewedOn = new DateTime(2020, 5, 3, 18, 4, 28, 596, DateTimeKind.Utc).AddTicks(3621),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BeerId = 6,
                            RMessage = "I don't recommend it!",
                            Rating = 1,
                            ReviewedOn = new DateTime(2020, 5, 3, 18, 4, 28, 596, DateTimeKind.Utc).AddTicks(3716),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            BeerId = 4,
                            RMessage = "Top class!",
                            Rating = 5,
                            ReviewedOn = new DateTime(2020, 5, 3, 18, 4, 28, 596, DateTimeKind.Utc).AddTicks(3747),
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            BeerId = 2,
                            RMessage = "Not great, not terrible.",
                            Rating = 3,
                            ReviewedOn = new DateTime(2020, 5, 3, 18, 4, 28, 596, DateTimeKind.Utc).AddTicks(3978),
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            BeerId = 3,
                            RMessage = "Not my taste.",
                            Rating = 2,
                            ReviewedOn = new DateTime(2020, 5, 3, 18, 4, 28, 596, DateTimeKind.Utc).AddTicks(4018),
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            BeerId = 7,
                            RMessage = "Rip off!",
                            Rating = 1,
                            ReviewedOn = new DateTime(2020, 5, 3, 18, 4, 28, 596, DateTimeKind.Utc).AddTicks(4046),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "e2a7bac8-5222-4ea2-b036-c4d046a3cc24",
                            Description = "Admin role",
                            Name = "Admin",
                            NormalizedName = "Sysadmin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "180c2da2-d198-4d23-ba95-426bb26d1e50",
                            Description = "User role",
                            Name = "User",
                            NormalizedName = "Sysuser"
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("banDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isBanned")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3863f2c-3172-4279-81fb-b1eae4e49ce9",
                            CreatedOn = new DateTime(2020, 5, 3, 18, 4, 28, 546, DateTimeKind.Utc).AddTicks(6942),
                            Email = "bvuchev@abv.bg",
                            EmailConfirmed = false,
                            FirstName = "Boyan",
                            LastName = "Vuchev",
                            LockoutEnabled = true,
                            NormalizedEmail = "BVUCHEV@ABV.BG",
                            NormalizedUserName = "BVUCHEV@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEOKPRD0sL3tpM8O6m1v/YGCXsiQZI++MBho+Mlh/swj3AwfhGa5RbvMHzJLocNmc6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DC6E275DD1E24957A7781D42BB68293B",
                            TwoFactorEnabled = false,
                            UserName = "bvuchev@abv.bg",
                            isBanned = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a44a4c9-e758-4a0f-8f29-76d2c4d34b77",
                            CreatedOn = new DateTime(2020, 5, 3, 18, 4, 28, 568, DateTimeKind.Utc).AddTicks(9101),
                            Email = "RSIMEONOV@aABV.BG",
                            EmailConfirmed = false,
                            FirstName = "Radoslav",
                            LastName = "Simeonov",
                            LockoutEnabled = true,
                            NormalizedEmail = "RSIMEONOV@ABV.BG",
                            NormalizedUserName = "RSIMEONOV@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEEBwKM4Q+ELbKlPArRPixDUsCZeR0Tb53zTcBVhM9Suq3INNafzzut4clL/Hfk3I6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "HNWQ7GQFUMWKGOAWSJNC5XV2VFYQRWHC",
                            TwoFactorEnabled = false,
                            UserName = "rsimeonov@abv.bg",
                            isBanned = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08c33479-3bda-497e-8e57-1a60acf90228",
                            CreatedOn = new DateTime(2020, 5, 3, 18, 4, 28, 583, DateTimeKind.Utc).AddTicks(5992),
                            Email = "IVAN@ABV.BG",
                            EmailConfirmed = false,
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            LockoutEnabled = true,
                            NormalizedEmail = "IVAN@ABV.BG",
                            NormalizedUserName = "IVAN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEMWIDeDn31jXsG+vJRuTt9Wf37MroJZohRgh/gkPalA8qYIZGEGBkLvLaJPGcCdENA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "CYHXVA33BAZ6B5DDG6AKUABAP3K7ONVY",
                            TwoFactorEnabled = false,
                            UserName = "ivan@abv.bg",
                            isBanned = false
                        });
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.UserBeers", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DrankOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BeerId");

                    b.HasIndex("BeerId");

                    b.ToTable("UserBeers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            BeerId = 2
                        },
                        new
                        {
                            UserId = 3,
                            BeerId = 7,
                            DrankOn = new DateTime(2020, 5, 3, 18, 4, 28, 595, DateTimeKind.Utc).AddTicks(5807)
                        },
                        new
                        {
                            UserId = 3,
                            BeerId = 5
                        },
                        new
                        {
                            UserId = 2,
                            BeerId = 10
                        },
                        new
                        {
                            UserId = 1,
                            BeerId = 3,
                            DrankOn = new DateTime(2020, 5, 3, 18, 4, 28, 595, DateTimeKind.Utc).AddTicks(7128)
                        },
                        new
                        {
                            UserId = 2,
                            BeerId = 2,
                            DrankOn = new DateTime(2020, 5, 3, 18, 4, 28, 595, DateTimeKind.Utc).AddTicks(7198)
                        },
                        new
                        {
                            UserId = 1,
                            BeerId = 4,
                            DrankOn = new DateTime(2020, 5, 3, 18, 4, 28, 595, DateTimeKind.Utc).AddTicks(7228)
                        },
                        new
                        {
                            UserId = 2,
                            BeerId = 5,
                            DrankOn = new DateTime(2020, 5, 3, 18, 4, 28, 595, DateTimeKind.Utc).AddTicks(7254)
                        },
                        new
                        {
                            UserId = 3,
                            BeerId = 6
                        },
                        new
                        {
                            UserId = 2,
                            BeerId = 9,
                            DrankOn = new DateTime(2020, 5, 3, 18, 4, 28, 595, DateTimeKind.Utc).AddTicks(7306)
                        },
                        new
                        {
                            UserId = 1,
                            BeerId = 9,
                            DrankOn = new DateTime(2020, 5, 3, 18, 4, 28, 595, DateTimeKind.Utc).AddTicks(7333)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Beer", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.BeerType", "BeerType")
                        .WithMany("Beers")
                        .HasForeignKey("BeerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.Brewery", "Brewery")
                        .WithMany("Beers")
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Brewery", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Country", "Country")
                        .WithMany("Breweries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.RateReview", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Review", "Review")
                        .WithMany("RateReviews")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("RateReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.Review", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany("Reviews")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeerOverflow.Data.Entities.UserBeers", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Beer", "Beer")
                        .WithMany()
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BeerOverflow.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
